/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatexactron"]("main_window",{

/***/ "./src/components/modals/field-modal.tsx":
/*!***********************************************!*\
  !*** ./src/components/modals/field-modal.tsx ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar react_2 = __webpack_require__(/*! @headlessui/react */ \"./node_modules/@headlessui/react/dist/index.esm.js\");\nvar registerActions_1 = __webpack_require__(/*! ../../store/registerActions */ \"./src/store/registerActions.ts\");\nvar fieldActions_1 = __webpack_require__(/*! ../../store/fieldActions */ \"./src/store/fieldActions.ts\");\nvar react_hook_form_1 = __webpack_require__(/*! react-hook-form */ \"./node_modules/react-hook-form/dist/index.cjs.js\");\nvar field_1 = __webpack_require__(/*! ../../models/field */ \"./src/models/field.ts\");\nvar uuid_1 = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\");\nvar yup_1 = __webpack_require__(/*! @hookform/resolvers/yup */ \"./node_modules/@hookform/resolvers/yup/dist/yup.module.js\");\nvar hooks_1 = __webpack_require__(/*! ../../hooks */ \"./src/hooks.ts\");\nvar yup = __importStar(__webpack_require__(/*! yup */ \"./node_modules/yup/es/index.js\"));\nvar access_1 = __webpack_require__(/*! ../../models/access */ \"./src/models/access.ts\");\nvar validation_funcs_1 = __webpack_require__(/*! ../../helpers/validation-funcs */ \"./src/helpers/validation-funcs.ts\");\nvar FieldModal = function (props) {\n    var cancelButtonRef = react_1.useRef(null);\n    var dispatch = hooks_1.useAppDispatch();\n    var addFieldAction = react_1.useCallback(function (field) { return dispatch(fieldActions_1.addField(field)); }, [dispatch, fieldActions_1.addField]);\n    var updateFieldAction = react_1.useCallback(function (field) { return dispatch(fieldActions_1.updateField(field)); }, [dispatch, fieldActions_1.updateField]);\n    var updateRegAction = react_1.useCallback(function (register) { return dispatch(registerActions_1.updateRegister(register)); }, [dispatch, registerActions_1.updateRegister]);\n    var regs = hooks_1.useAppSelector(function (state) { return state.registerReducer.registers; });\n    var storeFields = hooks_1.useAppSelector(function (state) { return state.fieldReducer.fields; });\n    var _a = react_1.useState(null), selectedField = _a[0], setSelectedField = _a[1];\n    var _b = react_1.useState('empty'), fieldID = _b[0], setFieldID = _b[1];\n    react_1.useEffect(function () {\n        var regToUpdate = regs.find(function (r) { return r.id === props.register; });\n        var value = 0;\n        var mask = 0;\n        if (regToUpdate != null && regToUpdate.fields != null && regToUpdate.fields.length > 0) {\n            regToUpdate.fields.forEach(function (field) {\n                var fetchedField = storeFields.find(function (f) { return f.id === field; });\n                if (fetchedField != null) {\n                    value += fetchedField.defaultValue * Math.pow(2, fetchedField.posl);\n                    console.log('Value', value);\n                    regToUpdate.defaultValue += value;\n                    fetchedField.access === access_1.Access.Write &&\n                        (mask += Math.pow(2, fetchedField.posh + 1) - Math.pow(2, fetchedField.posl));\n                    regToUpdate.mask = mask;\n                }\n            });\n            updateRegAction(regToUpdate);\n        }\n    }, [storeFields]);\n    react_1.useEffect(function () {\n        if (props.editMode) {\n            if (fieldID !== 'empty') {\n                var selected = storeFields.find(function (f) { return f.parentRegID === props.register; });\n                setValue('name', selected.name);\n                setValue('defaultValue', '0x' + selected.defaultValue.toString(16));\n                setValue('posh', selected.posh);\n                setValue('posl', selected.posl);\n                setValue('access', access_1.Access[selected.access]);\n                setValue('description', selected.description);\n                setSelectedField(selected);\n            }\n            else {\n                resetInitialValues();\n            }\n        }\n    }, [fieldID]);\n    var schema = yup.object().shape({\n        name: yup\n            .string()\n            .typeError('Field name is required')\n            .matches(RegExp('^[a-zA-Z0-9_]*$'), 'Use only alphanumeric characters and the underscore')\n            .required('Field name is required')\n            .test('Field name already exist', 'Field name already exist', function (value) { return fieldChecker(value, fieldID, 'NAME'); }),\n        access: yup.string().typeError('Access is required').required('Access is required'),\n        posh: yup\n            .number()\n            .typeError('Msb is required')\n            .integer('Msb must be an integer')\n            .positive('Msb must be positive')\n            .max(props.maxRange, \"Msb must be smaller than your function DataWidth (\" + props.maxRange + \")\")\n            .test('Msb should be > Lsb', 'Msb should be > Lsb', function (value, ctx) {\n            return value >= ctx.parent.posl;\n        })\n            .test('Msb encroaches on another field', 'Msb encroaches on another field', function (value) {\n            return !encroaches(value);\n        }),\n        posl: yup\n            .number()\n            .typeError('Lsb is required')\n            .integer('Lsb must be an integer')\n            .positive('Lsb must be positive')\n            .max(props.maxRange, \"Lsb must be smaller than your function DataWidth (\" + props.maxRange + \")\")\n            .test('Lsb should be < Msb', 'Lsb should be < Msb', function (value, ctx) {\n            return value <= ctx.parent.posh;\n        })\n            .test('Lsb encroaches on another field', 'Lsb encroaches on another field', function (value) {\n            return !encroaches(value);\n        })\n            .test('Msb & Lsb are contained in another range', 'Msb & Lsb are contained in another range', function (value, ctx) {\n            clearErrors('posh');\n            clearErrors('posl');\n            var reg = regs.find(function (r) { return r.id === props.register; });\n            var res;\n            reg.fields != null &&\n                reg.fields.forEach(function (f) {\n                    if (f !== fieldID) {\n                        var currentField = storeFields.find(function (field) { return field.id === f; });\n                        res = validation_funcs_1.rangeIn(value, ctx.parent.posh, currentField.posl, currentField.posh);\n                    }\n                });\n            return !res;\n        }),\n        defaultValue: yup\n            .string()\n            .typeError('Default value is required')\n            .matches(RegExp('0[xX][0-9a-fA-F]+'), 'Default value must be an hexadecimal value')\n            .required('Default value is required')\n            .test({\n            name: 'Max Default Value',\n            test: function (value, ctx) {\n                var max = Math.pow(2, ctx.parent.posh - ctx.parent.posl + 1) - 1;\n                return parseInt(value, 16) > max\n                    ? this.createError({\n                        message: \"Default value must be lower or equal than 0x\" + max.toString(16),\n                        path: 'defaultValue',\n                    })\n                    : true;\n            },\n        }),\n    });\n    var _c = react_hook_form_1.useForm({\n        resolver: yup_1.yupResolver(schema),\n    }), register = _c.register, handleSubmit = _c.handleSubmit, setValue = _c.setValue, clearErrors = _c.clearErrors, errors = _c.formState.errors, reset = _c.reset;\n    var fieldChecker = function (value, fieldID, type) {\n        var fieldRegs = regs.find(function (r) { return r.id === props.register; });\n        if (fieldRegs.fields !== null) {\n            var filtered = Array();\n            var fetchedFields = storeFields.filter(function (f) { return fieldRegs.fields.some(function (fieldID) { return f.id === fieldID; }); });\n            if (type === 'NAME') {\n                filtered = fetchedFields.filter(function (f) { return f.name === value && f.id !== fieldID; });\n            }\n            else {\n                return true;\n            }\n            return filtered.length > 0 ? false : true;\n        }\n        return true;\n    };\n    var encroaches = function (value) {\n        var reg = regs.find(function (r) { return r.id === props.register; });\n        var res;\n        reg.fields != null &&\n            reg.fields.forEach(function (f) {\n                if (f !== fieldID) {\n                    var currentField = storeFields.find(function (field) { return field.id === f; });\n                    res = validation_funcs_1.between(value, currentField.posl, currentField.posh);\n                }\n            });\n        return res;\n    };\n    var onSubmit = function (data) {\n        props.editMode ? editField(data) : createField(data);\n        props.setOpen(false);\n        resetInitialValues();\n        reset();\n    };\n    var createField = function (data) {\n        var fAccess = data.access;\n        var field = new field_1.Field(uuid_1.v4(), props.register, data.name, parseInt(data.defaultValue, 16), data.description, access_1.Access[fAccess], data.posh, data.posl, []);\n        addFieldAction(field);\n        var regToUpdate = regs.find(function (r) { return r.id === props.register; });\n        console.log('reg -> ', regToUpdate);\n        var currentFields = regToUpdate.fields;\n        currentFields.push(field.id);\n        regToUpdate.fields = currentFields;\n        updateRegAction(regToUpdate);\n        clearErrors();\n    };\n    var editField = function (data) {\n        var fAccess = data.access;\n        selectedField.defaultValue = parseInt(data.defaultValue, 16);\n        selectedField.name = data.name;\n        selectedField.posh = data.posh;\n        selectedField.posl = data.posl;\n        selectedField.access = access_1.Access[fAccess];\n        selectedField.description = data.description;\n        updateFieldAction(selectedField);\n        clearErrors();\n    };\n    var resetInitialValues = function () {\n        setValue('name', '');\n        setValue('posh', null);\n        setValue('posl', null);\n        setValue('access', access_1.Access[access_1.Access.Read]);\n        setValue('defaultValue', '');\n        setValue('description', '');\n        if (regs.length > 0) {\n            setSelectedField(null);\n            setFieldID('empty');\n        }\n        clearErrors();\n    };\n    var handleChange = function (e) {\n        var target = e.target;\n        setFieldID(target.value);\n    };\n    var handleCancel = function (event) {\n        props.setOpen(false);\n        resetInitialValues();\n        reset();\n    };\n    return (react_1.default.createElement(react_2.Transition.Root, { show: props.open, as: react_1.Fragment },\n        react_1.default.createElement(react_2.Dialog, { as: \"div\", static: true, className: \"fixed z-10 inset-0 overflow-y-auto h-screen\", initialFocus: cancelButtonRef, open: props.open, onClose: function () { } },\n            react_1.default.createElement(\"div\", { className: \"flex items-center justify-center min-h-screen pt-4 px-4 text-center sm:p-0\" },\n                react_1.default.createElement(react_2.Transition.Child, { as: react_1.Fragment, enter: \"ease-out duration-300\", enterFrom: \"opacity-0\", enterTo: \"opacity-100\", leave: \"ease-in duration-200\", leaveFrom: \"opacity-100\", leaveTo: \"opacity-0\" },\n                    react_1.default.createElement(react_2.Dialog.Overlay, { className: \"fixed inset-0 bg-blueGray-800 bg-transparent bg-opacity-75 transition-opacity\" })),\n                react_1.default.createElement(react_2.Transition.Child, { as: react_1.Fragment, enter: \"ease-out duration-200\", enterFrom: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\", enterTo: \"opacity-100 translate-y-0 sm:scale-100\", leave: \"ease-in duration-100\", leaveFrom: \"opacity-100 translate-y-0 sm:scale-100\", leaveTo: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\" },\n                    react_1.default.createElement(\"div\", { className: \"inline-block align-middle backdrop-filter backdrop-blur-lg backdrop-contrast-75 backdrop-brightness-200 rounded-3xl py-6 text-left overflow-hidden transform transition-all my-8 max-w-lg w-full px-6\" },\n                        react_1.default.createElement(\"div\", { className: \"text-left px-3 w-full\" },\n                            react_1.default.createElement(react_2.Dialog.Title, { as: \"h3\", className: \"text-xl leading-6 text-center font-medium text-white\" }, props.editMode ? 'Edit a field' : 'Create a new field'),\n                            react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                props.editMode && (react_1.default.createElement(\"div\", { className: \"mt-4\" },\n                                    react_1.default.createElement(\"label\", { htmlFor: \"register\", className: \"block text-sm font-medium text-white\" }, \"Field to edit\"),\n                                    react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                        react_1.default.createElement(\"select\", { id: \"registers\", name: \"registers\", className: \"mt-1 py-2 block w-full pl-3 pr-6 font-semibold bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white border rounded-lg focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\", value: fieldID, onChange: handleChange },\n                                            react_1.default.createElement(\"option\", { value: \"empty\" }, \"Choose a field\"),\n                                            storeFields\n                                                .filter(function (fi) { return fi.parentRegID === props.register; })\n                                                .map(function (f, idx) { return (react_1.default.createElement(\"option\", { key: idx, value: f.id }, f.name)); }))))),\n                                react_1.default.createElement(\"form\", { className: \"space-y-2\", onSubmit: handleSubmit(onSubmit) },\n                                    react_1.default.createElement(\"div\", { className: props.editMode ? 'mt-1' : 'mt-4' },\n                                        react_1.default.createElement(\"label\", { htmlFor: \"name\", className: \"block text-sm font-medium text-white\" },\n                                            \"Name \",\n                                            react_1.default.createElement(\"span\", { className: \"text-indigo-300\" }, errors.name && ' • ' + errors.name.message)),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                            react_1.default.createElement(\"input\", __assign({}, register('name', { required: true }), { type: \"text\", disabled: props.editMode && fieldID === 'empty', defaultValue: props.editMode && selectedField !== null ? selectedField.name : '', placeholder: \"field_name\", className: \"appearance-none block w-full px-3 py-2 disabled:opacity-75 border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg placeholder-blueGray-400 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" })))),\n                                    react_1.default.createElement(\"div\", null,\n                                        react_1.default.createElement(\"label\", { htmlFor: \"msb\", className: \"block text-sm font-medium text-white\" },\n                                            \"Msb \",\n                                            react_1.default.createElement(\"span\", { className: \"text-indigo-300\" }, errors.posh && ' • ' + errors.posh.message)),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                            react_1.default.createElement(\"input\", __assign({}, register('posh', { required: true }), { disabled: props.editMode && fieldID === 'empty', defaultValue: props.editMode && selectedField !== null ? selectedField.posh : '', type: \"number\", placeholder: \"8\", min: \"0\", className: \"appearance-none block w-full px-3 py-2 disabled:opacity-75 border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg placeholder-blueGray-400 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" })))),\n                                    react_1.default.createElement(\"div\", null,\n                                        react_1.default.createElement(\"label\", { htmlFor: \"lsb\", className: \"block text-sm font-medium text-white\" },\n                                            \"Lsb \",\n                                            react_1.default.createElement(\"span\", { className: \"text-indigo-300\" }, errors.posl && ' • ' + errors.posl.message)),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                            react_1.default.createElement(\"input\", __assign({}, register('posl', { required: true }), { disabled: props.editMode && fieldID === 'empty', defaultValue: props.editMode && selectedField !== null ? selectedField.posl : '', type: \"number\", placeholder: \"4\", min: \"0\", className: \"appearance-none block w-full px-3 py-2 disabled:opacity-75 border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg placeholder-blueGray-400 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" })))),\n                                    react_1.default.createElement(\"div\", null,\n                                        react_1.default.createElement(\"label\", { htmlFor: \"access\", className: \"block text-sm font-medium text-white\" },\n                                            \"Access \",\n                                            react_1.default.createElement(\"span\", { className: \"text-indigo-300\" }, errors.access && ' • ' + errors.access.message)),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                            react_1.default.createElement(\"select\", __assign({}, register('access', {\n                                                value: props.editMode && selectedField !== null\n                                                    ? access_1.Access[selectedField.access]\n                                                    : access_1.Access[access_1.Access.Read],\n                                            }), { disabled: props.editMode && fieldID === 'empty', className: \"mt-1 py-2 block w-full pl-3 pr-6 text-base border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" }), Object.values(access_1.Access)\n                                                .filter(function (item) { return typeof item === 'string'; })\n                                                .map(function (key) { return (react_1.default.createElement(\"option\", { key: key, value: key }, key)); })))),\n                                    react_1.default.createElement(\"div\", null,\n                                        react_1.default.createElement(\"label\", { htmlFor: \"defaultValue\", className: \"block text-sm font-medium text-white\" },\n                                            \"Default Value\",\n                                            ' ',\n                                            react_1.default.createElement(\"span\", { className: \"text-indigo-300\" }, errors.defaultValue && ' • ' + errors.defaultValue.message)),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1\" },\n                                            react_1.default.createElement(\"input\", __assign({}, register('defaultValue', { required: true }), { type: \"text\", disabled: props.editMode && fieldID === 'empty', defaultValue: props.editMode && selectedField !== null\n                                                    ? '0x' + selectedField.defaultValue.toString(16)\n                                                    : '', placeholder: \"0x0\", className: \"appearance-none block w-full px-3 py-2 disabled:opacity-75 border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg placeholder-blueGray-400 focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" })))),\n                                    react_1.default.createElement(\"div\", null,\n                                        react_1.default.createElement(\"label\", { htmlFor: \"description\", className: \"block text-sm font-medium text-white\" },\n                                            \"Description\",\n                                            ' '),\n                                        react_1.default.createElement(\"div\", { className: \"mt-1 min-h-36 max-h-40\" },\n                                            react_1.default.createElement(\"textarea\", __assign({}, register('description', {\n                                                required: false,\n                                                value: props.editMode && selectedField !== null ? selectedField.description : '',\n                                            }), { disabled: props.editMode && fieldID === 'empty', placeholder: \"Description\", className: \"appearance-none block w-full px-3 py-2 max-h-28 disabled:opacity-75 border bg-blueGray-600 border-blueGray-600 dark:bg-gray-700 dark:border-transparent dark:placeholder-gray-300 text-white rounded-lg placeholder-blueGray-400 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm\" })))),\n                                    react_1.default.createElement(\"div\", { className: \"mt-2 pt-3 flex flex-row-reverse\" },\n                                        react_1.default.createElement(\"button\", { type: \"submit\", disabled: props.editMode && fieldID === 'empty', className: \"w-full inline-flex justify-center rounded-lg shadow-lg px-4 py-2 disabled:transform-none disabled:opacity-50 disabled:bg-yellow-500  bg-\" + (props.editMode ? 'yellow' : 'emerald') + \"-400 text-base font-medium text-white hover:bg-\" + (props.editMode ? 'yellow' : 'emerald') + \"-500 duration-300 transform hover:scale-95 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm\" },\n                                            props.editMode ? 'Edit' : 'Add',\n                                            \" Field\"),\n                                        react_1.default.createElement(\"button\", { type: \"button\", className: \"mt-3 w-full inline-flex justify-center rounded-lg active:scale-95 transform shadow-lg hover:shadow-lg duration-300 px-4 py-2 bg-blueGray-600 dark:bg-gray-700 text-base text-gray-300 font-medium sm:mt-0 sm:w-auto sm:text-sm focus:outline-none\", onClick: handleCancel, ref: cancelButtonRef }, \"Cancel\")))))))))));\n};\nexports.default = FieldModal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94YWN0cm9uLy4vc3JjL2NvbXBvbmVudHMvbW9kYWxzL2ZpZWxkLW1vZGFsLnRzeD80OWY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOEZBQWtGO0FBQ2xGLGlIQUF1RDtBQUN2RCxpSEFBNkQ7QUFDN0Qsd0dBQWlFO0FBRWpFLHVIQUEwQztBQUMxQyxxRkFBMkM7QUFHM0MsOEZBQW9DO0FBQ3BDLDRIQUFzRDtBQUN0RCx1RUFBNkQ7QUFDN0QseUZBQTJCO0FBQzNCLHdGQUE2QztBQUU3Qyx3SEFBa0U7QUFVbEUsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUFzQjtJQUN4QyxJQUFNLGVBQWUsR0FBRyxjQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckMsSUFBTSxRQUFRLEdBQWtCLHNCQUFjLEVBQUUsQ0FBQztJQUVqRCxJQUFNLGNBQWMsR0FBRyxtQkFBVyxDQUFDLFVBQUMsS0FBWSxJQUFLLGVBQVEsQ0FBQyx1QkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQXpCLENBQXlCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsdUJBQVEsQ0FBQyxDQUFDLENBQUM7SUFFdEcsSUFBTSxpQkFBaUIsR0FBRyxtQkFBVyxDQUFDLFVBQUMsS0FBWSxJQUFLLGVBQVEsQ0FBQywwQkFBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQTVCLENBQTRCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsMEJBQVcsQ0FBQyxDQUFDLENBQUM7SUFDL0csSUFBTSxlQUFlLEdBQUcsbUJBQVcsQ0FDakMsVUFBQyxRQUFrQixJQUFLLGVBQVEsQ0FBQyxnQ0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQWxDLENBQWtDLEVBQzFELENBQUMsUUFBUSxFQUFFLGdDQUFjLENBQUMsQ0FDM0IsQ0FBQztJQUVGLElBQU0sSUFBSSxHQUF3QixzQkFBYyxDQUFDLFVBQUMsS0FBSyxJQUFLLFlBQUssQ0FBQyxlQUFlLENBQUMsU0FB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RSxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxPQUFPLEVBQy9DLFNBQVMsRUFBRSw4SUFDVCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMseURBRXJDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxnR0FDcUQ7NENBRTNGLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSztxREFDekI7d0NBQ1QsMENBQ0UsSUFBSSxFQUFDLFFBQVEsRUFDYixTQUFTLEVBQUMsbVBBQW1QLEVBQzdQLE9BQU8sRUFBRSxZQUFZLEVBQ3JCLEdBQUcsRUFBRSxlQUFlLGFBR2IsQ0FDTCxDQUNELENBQ0gsQ0FDRixDQUNGLENBQ1csQ0FDZixDQUNDLENBQ08sQ0FDbkIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGtCQUFlLFVBQVUsQ0FBQyIsImZpbGUiOiIuL3NyYy9jb21wb25lbnRzL21vZGFscy9maWVsZC1tb2RhbC50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEaWFsb2csIFRyYW5zaXRpb24gfSBmcm9tICdAaGVhZGxlc3N1aS9yZWFjdCc7XG5pbXBvcnQgeyB1cGRhdGVSZWdpc3RlciB9IGZyb20gJy4uLy4uL3N0b3JlL3JlZ2lzdGVyQWN0aW9ucyc7XG5pbXBvcnQgeyBhZGRGaWVsZCwgdXBkYXRlRmllbGQgfSBmcm9tICcuLi8uLi9zdG9yZS9maWVsZEFjdGlvbnMnO1xuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ZpZWxkJztcbmltcG9ydCB7IFJlZ2lzdGVyIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3JlZ2lzdGVyJztcbmltcG9ydCB7IEFkZHJlc3NTcGFjZSB9IGZyb20gJy4uLy4uL21vZGVscy9hZGRyZXNzLXNwYWNlJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgeXVwUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3l1cCc7XG5pbXBvcnQgeyB1c2VBcHBTZWxlY3RvciwgdXNlQXBwRGlzcGF0Y2ggfSBmcm9tICcuLi8uLi9ob29rcyc7XG5pbXBvcnQgKiBhcyB5dXAgZnJvbSAneXVwJztcbmltcG9ydCB7IEFjY2VzcyB9IGZyb20gJy4uLy4uL21vZGVscy9hY2Nlc3MnO1xuaW1wb3J0IHsgSUZpZWxkRm9ybUlucHV0cyB9IGZyb20gJy4uLy4uL21vZGVscy9maWVsZC1mb3JtLWlucHV0cyc7XG5pbXBvcnQgeyBiZXR3ZWVuLCByYW5nZUluIH0gZnJvbSAnLi4vLi4vaGVscGVycy92YWxpZGF0aW9uLWZ1bmNzJztcblxudHlwZSBGaWVsZE1vZGFsUHJvcHMgPSB7XG4gIG9wZW46IGJvb2xlYW47XG4gIHNldE9wZW46IChvcGVuOiBib29sZWFuKSA9PiB2b2lkO1xuICBlZGl0TW9kZTogYm9vbGVhbjtcbiAgcmVnaXN0ZXI6IHN0cmluZztcbiAgbWF4UmFuZ2U6IG51bWJlcjtcbn07XG5cbmNvbnN0IEZpZWxkTW9kYWwgPSAocHJvcHM6IEZpZWxkTW9kYWxQcm9wcykgPT4ge1xuICBjb25zdCBjYW5jZWxCdXR0b25SZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgZGlzcGF0Y2g6IERpc3BhdGNoPGFueT4gPSB1c2VBcHBEaXNwYXRjaCgpO1xuXG4gIGNvbnN0IGFkZEZpZWxkQWN0aW9uID0gdXNlQ2FsbGJhY2soKGZpZWxkOiBGaWVsZCkgPT4gZGlzcGF0Y2goYWRkRmllbGQoZmllbGQpKSwgW2Rpc3BhdGNoLCBhZGRGaWVsZF0pO1xuXG4gIGNvbnN0IHVwZGF0ZUZpZWxkQWN0aW9uID0gdXNlQ2FsbGJhY2soKGZpZWxkOiBGaWVsZCkgPT4gZGlzcGF0Y2godXBkYXRlRmllbGQoZmllbGQpKSwgW2Rpc3BhdGNoLCB1cGRhdGVGaWVsZF0pO1xuICBjb25zdCB1cGRhdGVSZWdBY3Rpb24gPSB1c2VDYWxsYmFjayhcbiAgICAocmVnaXN0ZXI6IFJlZ2lzdGVyKSA9PiBkaXNwYXRjaCh1cGRhdGVSZWdpc3RlcihyZWdpc3RlcikpLFxuICAgIFtkaXNwYXRjaCwgdXBkYXRlUmVnaXN0ZXJdLFxuICApO1xuXG4gIGNvbnN0IHJlZ3M6IHJlYWRvbmx5IFJlZ2lzdGVyW10gPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnJlZ2lzdGVyUmVkdWNlci5yZWdpc3RlcnMpO1xuICBjb25zdCBzdG9yZUZpZWxkczogcmVhZG9ubHkgRmllbGRbXSA9IHVzZUFwcFNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuZmllbGRSZWR1Y2VyLmZpZWxkcyk7XG5cbiAgY29uc3QgW3NlbGVjdGVkRmllbGQsIHNldFNlbGVjdGVkRmllbGRdID0gdXNlU3RhdGU8RmllbGQ+KG51bGwpO1xuICBjb25zdCBbZmllbGRJRCwgc2V0RmllbGRJRF0gPSB1c2VTdGF0ZSgnZW1wdHknKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJlZ1RvVXBkYXRlOiBSZWdpc3RlciA9IHJlZ3MuZmluZCgocikgPT4gci5pZCA9PT0gcHJvcHMucmVnaXN0ZXIpO1xuICAgIGxldCB2YWx1ZTogbnVtYmVyID0gMDtcbiAgICBsZXQgbWFzazogbnVtYmVyID0gMDtcblxuICAgIGlmIChyZWdUb1VwZGF0ZSAhPSBudWxsICYmIHJlZ1RvVXBkYXRlLmZpZWxkcyAhPSBudWxsICYmIHJlZ1RvVXBkYXRlLmZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICByZWdUb1VwZGF0ZS5maWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgbGV0IGZldGNoZWRGaWVsZCA9IHN0b3JlRmllbGRzLmZpbmQoKGYpID0+IGYuaWQgPT09IGZpZWxkKTtcbiAgICAgICAgaWYgKGZldGNoZWRGaWVsZCAhPSBudWxsKSB7XG4gICAgICAgICAgdmFsdWUgKz0gZmV0Y2hlZEZpZWxkLmRlZmF1bHRWYWx1ZSAqIE1hdGgucG93KDIsIGZldGNoZWRGaWVsZC5wb3NsKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnVmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgICAgcmVnVG9VcGRhdGUuZGVmYXVsdFZhbHVlICs9IHZhbHVlO1xuICAgICAgICAgIGZldGNoZWRGaWVsZC5hY2Nlc3MgPT09IEFjY2Vzcy5Xcml0ZSAmJlxuICAgICAgICAgICAgKG1hc2sgKz0gTWF0aC5wb3coMiwgZmV0Y2hlZEZpZWxkLnBvc2ggKyAxKSAtIE1hdGgucG93KDIsIGZldGNoZWRGaWVsZC5wb3NsKSk7XG4gICAgICAgICAgcmVnVG9VcGRhdGUubWFzayA9IG1hc2s7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdXBkYXRlUmVnQWN0aW9uKHJlZ1RvVXBkYXRlKTtcbiAgICB9XG4gIH0sIFtzdG9yZUZpZWxkc10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLmVkaXRNb2RlKSB7XG4gICAgICBpZiAoZmllbGRJRCAhPT0gJ2VtcHR5Jykge1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHN0b3JlRmllbGRzLmZpbmQoKGYpID0+IGYucGFyZW50UmVnSUQgPT09IHByb3BzLnJlZ2lzdGVyKTtcbiAgICAgICAgc2V0VmFsdWUoJ25hbWUnLCBzZWxlY3RlZC5uYW1lKTtcbiAgICAgICAgc2V0VmFsdWUoJ2RlZmF1bHRWYWx1ZScsICcweCcgKyBzZWxlY3RlZC5kZWZhdWx0VmFsdWUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgc2V0VmFsdWUoJ3Bvc2gnLCBzZWxlY3RlZC5wb3NoKTtcbiAgICAgICAgc2V0VmFsdWUoJ3Bvc2wnLCBzZWxlY3RlZC5wb3NsKTtcbiAgICAgICAgc2V0VmFsdWUoJ2FjY2VzcycsIEFjY2Vzc1tzZWxlY3RlZC5hY2Nlc3MgYXMgbnVtYmVyXSk7XG4gICAgICAgIHNldFZhbHVlKCdkZXNjcmlwdGlvbicsIHNlbGVjdGVkLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgc2V0U2VsZWN0ZWRGaWVsZChzZWxlY3RlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNldEluaXRpYWxWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtmaWVsZElEXSk7XG5cbiAgXG5cbiAgY29uc3Qgc2NoZW1hID0geXVwLm9iamVjdCgpLnNoYXBlKHtcbiAgICBuYW1lOiB5dXBcbiAgICAgIC5zdHJpbmcoKVxuICAgICAgLnR5cGVFcnJvcignRmllbGQgbmFtZSBpcyByZXF1aXJlZCcpXG4gICAgICAubWF0Y2hlcyhSZWdFeHAoJ15bYS16QS1aMC05X10qJCcpLCAnVXNlIG9ubHkgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHRoZSB1bmRlcnNjb3JlJylcbiAgICAgIC5yZXF1aXJlZCgnRmllbGQgbmFtZSBpcyByZXF1aXJlZCcpXG4gICAgICAudGVzdCgnRmllbGQgbmFtZSBhbHJlYWR5IGV4aXN0JywgJ0ZpZWxkIG5hbWUgYWxyZWFkeSBleGlzdCcsICh2YWx1ZSkgPT4gZmllbGRDaGVja2VyKHZhbHVlLCBmaWVsZElELCAnTkFNRScpKSxcblxuICAgIGFjY2VzczogeXVwLnN0cmluZygpLnR5cGVFcnJvcignQWNjZXNzIGlzIHJlcXVpcmVkJykucmVxdWlyZWQoJ0FjY2VzcyBpcyByZXF1aXJlZCcpLFxuICAgIHBvc2g6IHl1cFxuICAgICAgLm51bWJlcigpXG4gICAgICAudHlwZUVycm9yKCdNc2IgaXMgcmVxdWlyZWQnKVxuICAgICAgLmludGVnZXIoJ01zYiBtdXN0IGJlIGFuIGludGVnZXInKVxuICAgICAgLnBvc2l0aXZlKCdNc2IgbXVzdCBiZSBwb3NpdGl2ZScpXG4gICAgICAubWF4KHByb3BzLm1heFJhbmdlLCBgTXNiIG11c3QgYmUgc21hbGxlciB0aGFuIHlvdXIgZnVuY3Rpb24gRGF0YVdpZHRoICgke3Byb3BzLm1heFJhbmdlfSlgKVxuICAgICAgLnRlc3QoJ01zYiBzaG91bGQgYmUgPiBMc2InLCAnTXNiIHNob3VsZCBiZSA+IExzYicsICh2YWx1ZSwgY3R4KSA9PiB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSBjdHgucGFyZW50LnBvc2w7XG4gICAgICB9KVxuICAgICAgLnRlc3QoJ01zYiBlbmNyb2FjaGVzIG9uIGFub3RoZXIgZmllbGQnLCAnTXNiIGVuY3JvYWNoZXMgb24gYW5vdGhlciBmaWVsZCcsICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gIWVuY3JvYWNoZXModmFsdWUpO1xuICAgICAgfSksXG4gICAgcG9zbDogeXVwXG4gICAgICAubnVtYmVyKClcbiAgICAgIC50eXBlRXJyb3IoJ0xzYiBpcyByZXF1aXJlZCcpXG4gICAgICAuaW50ZWdlcignTHNiIG11c3QgYmUgYW4gaW50ZWdlcicpXG4gICAgICAucG9zaXRpdmUoJ0xzYiBtdXN0IGJlIHBvc2l0aXZlJylcbiAgICAgIC5tYXgocHJvcHMubWF4UmFuZ2UsIGBMc2IgbXVzdCBiZSBzbWFsbGVyIHRoYW4geW91ciBmdW5jdGlvbiBEYXRhV2lkdGggKCR7cHJvcHMubWF4UmFuZ2V9KWApXG4gICAgICAudGVzdCgnTHNiIHNob3VsZCBiZSA8IE1zYicsICdMc2Igc2hvdWxkIGJlIDwgTXNiJywgKHZhbHVlLCBjdHgpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDw9IGN0eC5wYXJlbnQucG9zaDtcbiAgICAgIH0pXG4gICAgICAudGVzdCgnTHNiIGVuY3JvYWNoZXMgb24gYW5vdGhlciBmaWVsZCcsICdMc2IgZW5jcm9hY2hlcyBvbiBhbm90aGVyIGZpZWxkJywgKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiAhZW5jcm9hY2hlcyh2YWx1ZSk7XG4gICAgICB9KVxuICAgICAgLnRlc3QoJ01zYiAmIExzYiBhcmUgY29udGFpbmVkIGluIGFub3RoZXIgcmFuZ2UnLCAnTXNiICYgTHNiIGFyZSBjb250YWluZWQgaW4gYW5vdGhlciByYW5nZScsICh2YWx1ZSwgY3R4KSA9PiB7XG4gICAgICAgIGNsZWFyRXJyb3JzKCdwb3NoJyk7XG4gICAgICAgIGNsZWFyRXJyb3JzKCdwb3NsJyk7XG4gICAgICAgIGNvbnN0IHJlZyA9IHJlZ3MuZmluZCgocikgPT4gci5pZCA9PT0gcHJvcHMucmVnaXN0ZXIpO1xuICAgICAgICBsZXQgcmVzOiBib29sZWFuO1xuICAgICAgICByZWcuZmllbGRzICE9IG51bGwgJiZcbiAgICAgICAgICByZWcuZmllbGRzLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgICAgIGlmIChmICE9PSBmaWVsZElEKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWVsZCA9IHN0b3JlRmllbGRzLmZpbmQoKGZpZWxkKSA9PiBmaWVsZC5pZCA9PT0gZik7XG4gICAgICAgICAgICAgIHJlcyA9IHJhbmdlSW4odmFsdWUsIGN0eC5wYXJlbnQucG9zaCwgY3VycmVudEZpZWxkLnBvc2wsIGN1cnJlbnRGaWVsZC5wb3NoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICFyZXM7XG4gICAgICB9KSxcbiAgICBkZWZhdWx0VmFsdWU6IHl1cFxuICAgICAgLnN0cmluZygpXG4gICAgICAudHlwZUVycm9yKCdEZWZhdWx0IHZhbHVlIGlzIHJlcXVpcmVkJylcbiAgICAgIC5tYXRjaGVzKFJlZ0V4cCgnMFt4WF1bMC05YS1mQS1GXSsnKSwgJ0RlZmF1bHQgdmFsdWUgbXVzdCBiZSBhbiBoZXhhZGVjaW1hbCB2YWx1ZScpXG4gICAgICAucmVxdWlyZWQoJ0RlZmF1bHQgdmFsdWUgaXMgcmVxdWlyZWQnKVxuICAgICAgLnRlc3Qoe1xuICAgICAgICBuYW1lOiAnTWF4IERlZmF1bHQgVmFsdWUnLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAodmFsdWUsIGN0eCkge1xuICAgICAgICAgIGxldCBtYXggPSBNYXRoLnBvdygyLCBjdHgucGFyZW50LnBvc2ggLSBjdHgucGFyZW50LnBvc2wgKyAxKSAtIDE7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxNikgPiBtYXhcbiAgICAgICAgICAgID8gdGhpcy5jcmVhdGVFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYERlZmF1bHQgdmFsdWUgbXVzdCBiZSBsb3dlciBvciBlcXVhbCB0aGFuIDB4JHttYXgudG9TdHJpbmcoMTYpfWAsXG4gICAgICAgICAgICAgICAgcGF0aDogJ2RlZmF1bHRWYWx1ZScsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IHRydWU7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBzZXRWYWx1ZSxcbiAgICBjbGVhckVycm9ycyxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXG4gICAgcmVzZXQsXG4gIH0gPSB1c2VGb3JtPElGaWVsZEZvcm1JbnB1dHM+KHtcbiAgICByZXNvbHZlcjogeXVwUmVzb2x2ZXIoc2NoZW1hKSxcbiAgfSk7XG5cbiAgY29uc3QgZmllbGRDaGVja2VyID0gKHZhbHVlOiBzdHJpbmcsIGZpZWxkSUQ6IHN0cmluZywgdHlwZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgY29uc3QgZmllbGRSZWdzID0gcmVncy5maW5kKChyKSA9PiByLmlkID09PSBwcm9wcy5yZWdpc3Rlcik7XG4gICAgaWYgKGZpZWxkUmVncy5maWVsZHMgIT09IG51bGwpIHtcbiAgICAgIGxldCBmaWx0ZXJlZCA9IEFycmF5PEZpZWxkPigpO1xuICAgICAgY29uc3QgZmV0Y2hlZEZpZWxkcyA9IHN0b3JlRmllbGRzLmZpbHRlcigoZikgPT4gZmllbGRSZWdzLmZpZWxkcy5zb21lKChmaWVsZElEKSA9PiBmLmlkID09PSBmaWVsZElEKSk7XG4gICAgICBpZiAodHlwZSA9PT0gJ05BTUUnKSB7XG4gICAgICAgIGZpbHRlcmVkID0gZmV0Y2hlZEZpZWxkcy5maWx0ZXIoKGYpID0+IGYubmFtZSA9PT0gdmFsdWUgJiYgZi5pZCAhPT0gZmllbGRJRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggPiAwID8gZmFsc2UgOiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBjb25zdCBlbmNyb2FjaGVzID0gKHZhbHVlOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCByZWcgPSByZWdzLmZpbmQoKHIpID0+IHIuaWQgPT09IHByb3BzLnJlZ2lzdGVyKTtcbiAgICBsZXQgcmVzOiBib29sZWFuO1xuICAgIHJlZy5maWVsZHMgIT0gbnVsbCAmJlxuICAgICAgcmVnLmZpZWxkcy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgIGlmIChmICE9PSBmaWVsZElEKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudEZpZWxkID0gc3RvcmVGaWVsZHMuZmluZCgoZmllbGQpID0+IGZpZWxkLmlkID09PSBmKTtcbiAgICAgICAgICByZXMgPSBiZXR3ZWVuKHZhbHVlLCBjdXJyZW50RmllbGQucG9zbCwgY3VycmVudEZpZWxkLnBvc2gpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGRhdGE6IElGaWVsZEZvcm1JbnB1dHMpID0+IHtcbiAgICBwcm9wcy5lZGl0TW9kZSA/IGVkaXRGaWVsZChkYXRhKSA6IGNyZWF0ZUZpZWxkKGRhdGEpO1xuICAgIHByb3BzLnNldE9wZW4oZmFsc2UpO1xuICAgIHJlc2V0SW5pdGlhbFZhbHVlcygpO1xuICAgIHJlc2V0KCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlRmllbGQgPSAoZGF0YTogSUZpZWxkRm9ybUlucHV0cykgPT4ge1xuICAgIGxldCBmQWNjZXNzOiBrZXlvZiB0eXBlb2YgQWNjZXNzID0gZGF0YS5hY2Nlc3MgYXMga2V5b2YgdHlwZW9mIEFjY2VzcztcbiAgICBsZXQgZmllbGQ6IEZpZWxkID0gbmV3IEZpZWxkKFxuICAgICAgdXVpZHY0KCksXG4gICAgICBwcm9wcy5yZWdpc3RlcixcbiAgICAgIGRhdGEubmFtZSxcbiAgICAgIHBhcnNlSW50KGRhdGEuZGVmYXVsdFZhbHVlLCAxNiksXG4gICAgICBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgQWNjZXNzW2ZBY2Nlc3NdLFxuICAgICAgZGF0YS5wb3NoLFxuICAgICAgZGF0YS5wb3NsLFxuICAgICAgW10sXG4gICAgKTtcblxuICAgIGFkZEZpZWxkQWN0aW9uKGZpZWxkKTtcbiAgICBjb25zdCByZWdUb1VwZGF0ZTogUmVnaXN0ZXIgPSByZWdzLmZpbmQoKHIpID0+IHIuaWQgPT09IHByb3BzLnJlZ2lzdGVyKTtcbiAgICBjb25zb2xlLmxvZygncmVnIC0+ICcsIHJlZ1RvVXBkYXRlKTtcbiAgICBsZXQgY3VycmVudEZpZWxkcyA9IHJlZ1RvVXBkYXRlLmZpZWxkcztcbiAgICBjdXJyZW50RmllbGRzLnB1c2goZmllbGQuaWQpO1xuICAgIHJlZ1RvVXBkYXRlLmZpZWxkcyA9IGN1cnJlbnRGaWVsZHM7XG4gICAgdXBkYXRlUmVnQWN0aW9uKHJlZ1RvVXBkYXRlKTtcbiAgICBjbGVhckVycm9ycygpO1xuICB9O1xuXG4gIGNvbnN0IGVkaXRGaWVsZCA9IChkYXRhOiBJRmllbGRGb3JtSW5wdXRzKSA9PiB7XG4gICAgbGV0IGZBY2Nlc3M6IGtleW9mIHR5cGVvZiBBY2Nlc3MgPSBkYXRhLmFjY2VzcyBhcyBrZXlvZiB0eXBlb2YgQWNjZXNzO1xuICAgIHNlbGVjdGVkRmllbGQuZGVmYXVsdFZhbHVlID0gcGFyc2VJbnQoZGF0YS5kZWZhdWx0VmFsdWUsIDE2KTtcbiAgICBzZWxlY3RlZEZpZWxkLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgc2VsZWN0ZWRGaWVsZC5wb3NoID0gZGF0YS5wb3NoO1xuICAgIHNlbGVjdGVkRmllbGQucG9zbCA9IGRhdGEucG9zbDtcbiAgICBzZWxlY3RlZEZpZWxkLmFjY2VzcyA9IEFjY2Vzc1tmQWNjZXNzXTtcbiAgICBzZWxlY3RlZEZpZWxkLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcbiAgICB1cGRhdGVGaWVsZEFjdGlvbihzZWxlY3RlZEZpZWxkKTtcbiAgICBjbGVhckVycm9ycygpO1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0SW5pdGlhbFZhbHVlcyA9ICgpID0+IHtcbiAgICBzZXRWYWx1ZSgnbmFtZScsICcnKTtcbiAgICBzZXRWYWx1ZSgncG9zaCcsIG51bGwpO1xuICAgIHNldFZhbHVlKCdwb3NsJywgbnVsbCk7XG4gICAgc2V0VmFsdWUoJ2FjY2VzcycsIEFjY2Vzc1tBY2Nlc3MuUmVhZF0pO1xuICAgIHNldFZhbHVlKCdkZWZhdWx0VmFsdWUnLCAnJyk7XG4gICAgc2V0VmFsdWUoJ2Rlc2NyaXB0aW9uJywgJycpO1xuXG4gICAgaWYgKHJlZ3MubGVuZ3RoID4gMCkge1xuICAgICAgc2V0U2VsZWN0ZWRGaWVsZChudWxsKTtcbiAgICAgIHNldEZpZWxkSUQoJ2VtcHR5Jyk7XG4gICAgfVxuICAgIGNsZWFyRXJyb3JzKCk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHNldEZpZWxkSUQodGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDYW5jZWw6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxCdXR0b25FbGVtZW50PiA9IChldmVudCkgPT4ge1xuICAgIHByb3BzLnNldE9wZW4oZmFsc2UpO1xuICAgIHJlc2V0SW5pdGlhbFZhbHVlcygpO1xuICAgIHJlc2V0KCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8VHJhbnNpdGlvbi5Sb290IHNob3c9e3Byb3BzLm9wZW59IGFzPXtGcmFnbWVudH0+XG4gICAgICA8RGlhbG9nXG4gICAgICAgIGFzPVwiZGl2XCJcbiAgICAgICAgc3RhdGljXG4gICAgICAgIGNsYXNzTmFtZT1cImZpeGVkIHotMTAgaW5zZXQtMCBvdmVyZmxvdy15LWF1dG8gaC1zY3JlZW5cIlxuICAgICAgICBpbml0aWFsRm9jdXM9e2NhbmNlbEJ1dHRvblJlZn1cbiAgICAgICAgb3Blbj17cHJvcHMub3Blbn1cbiAgICAgICAgb25DbG9zZT17KCkgPT4ge319XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgbWluLWgtc2NyZWVuIHB0LTQgcHgtNCB0ZXh0LWNlbnRlciBzbTpwLTBcIj5cbiAgICAgICAgICA8VHJhbnNpdGlvbi5DaGlsZFxuICAgICAgICAgICAgYXM9e0ZyYWdtZW50fVxuICAgICAgICAgICAgZW50ZXI9XCJlYXNlLW91dCBkdXJhdGlvbi0zMDBcIlxuICAgICAgICAgICAgZW50ZXJGcm9tPVwib3BhY2l0eS0wXCJcbiAgICAgICAgICAgIGVudGVyVG89XCJvcGFjaXR5LTEwMFwiXG4gICAgICAgICAgICBsZWF2ZT1cImVhc2UtaW4gZHVyYXRpb24tMjAwXCJcbiAgICAgICAgICAgIGxlYXZlRnJvbT1cIm9wYWNpdHktMTAwXCJcbiAgICAgICAgICAgIGxlYXZlVG89XCJvcGFjaXR5LTBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxEaWFsb2cuT3ZlcmxheSBjbGFzc05hbWU9XCJmaXhlZCBpbnNldC0wIGJnLWJsdWVHcmF5LTgwMCBiZy10cmFuc3BhcmVudCBiZy1vcGFjaXR5LTc1IHRyYW5zaXRpb24tb3BhY2l0eVwiIC8+XG4gICAgICAgICAgPC9UcmFuc2l0aW9uLkNoaWxkPlxuXG4gICAgICAgICAgPFRyYW5zaXRpb24uQ2hpbGRcbiAgICAgICAgICAgIGFzPXtGcmFnbWVudH1cbiAgICAgICAgICAgIGVudGVyPVwiZWFzZS1vdXQgZHVyYXRpb24tMjAwXCJcbiAgICAgICAgICAgIGVudGVyRnJvbT1cIm9wYWNpdHktMCB0cmFuc2xhdGUteS00IHNtOnRyYW5zbGF0ZS15LTAgc206c2NhbGUtOTVcIlxuICAgICAgICAgICAgZW50ZXJUbz1cIm9wYWNpdHktMTAwIHRyYW5zbGF0ZS15LTAgc206c2NhbGUtMTAwXCJcbiAgICAgICAgICAgIGxlYXZlPVwiZWFzZS1pbiBkdXJhdGlvbi0xMDBcIlxuICAgICAgICAgICAgbGVhdmVGcm9tPVwib3BhY2l0eS0xMDAgdHJhbnNsYXRlLXktMCBzbTpzY2FsZS0xMDBcIlxuICAgICAgICAgICAgbGVhdmVUbz1cIm9wYWNpdHktMCB0cmFuc2xhdGUteS00IHNtOnRyYW5zbGF0ZS15LTAgc206c2NhbGUtOTVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWJsb2NrIGFsaWduLW1pZGRsZSBiYWNrZHJvcC1maWx0ZXIgYmFja2Ryb3AtYmx1ci1sZyBiYWNrZHJvcC1jb250cmFzdC03NSBiYWNrZHJvcC1icmlnaHRuZXNzLTIwMCByb3VuZGVkLTN4bCBweS02IHRleHQtbGVmdCBvdmVyZmxvdy1oaWRkZW4gdHJhbnNmb3JtIHRyYW5zaXRpb24tYWxsIG15LTggbWF4LXctbGcgdy1mdWxsIHB4LTZcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWxlZnQgcHgtMyB3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgICA8RGlhbG9nLlRpdGxlIGFzPVwiaDNcIiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGxlYWRpbmctNiB0ZXh0LWNlbnRlciBmb250LW1lZGl1bSB0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgICAgICB7cHJvcHMuZWRpdE1vZGUgPyAnRWRpdCBhIGZpZWxkJyA6ICdDcmVhdGUgYSBuZXcgZmllbGQnfVxuICAgICAgICAgICAgICAgIDwvRGlhbG9nLlRpdGxlPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0xXCI+XG4gICAgICAgICAgICAgICAgICB7cHJvcHMuZWRpdE1vZGUgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlZ2lzdGVyXCIgY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBGaWVsZCB0byBlZGl0XG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWdpc3RlcnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwicmVnaXN0ZXJzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtMSBweS0yIGJsb2NrIHctZnVsbCBwbC0zIHByLTYgZm9udC1zZW1pYm9sZCBiZy1ibHVlR3JheS02MDAgYm9yZGVyLWJsdWVHcmF5LTYwMCBkYXJrOmJnLWdyYXktNzAwIGRhcms6Ym9yZGVyLXRyYW5zcGFyZW50IGRhcms6cGxhY2Vob2xkZXItZ3JheS0zMDAgdGV4dC13aGl0ZSBib3JkZXIgcm91bmRlZC1sZyBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy1za3ktNDAwIGZvY3VzOmJvcmRlci1za3ktNDAwIHNtOnRleHQtc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmllbGRJRH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImVtcHR5XCI+Q2hvb3NlIGEgZmllbGQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge3N0b3JlRmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZmkpID0+IGZpLnBhcmVudFJlZ0lEID09PSBwcm9wcy5yZWdpc3RlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChmLCBpZHgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtpZHh9IHZhbHVlPXtmLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2YubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwic3BhY2UteS0yXCIgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChvblN1Ym1pdCl9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuZWRpdE1vZGUgPyAnbXQtMScgOiAnbXQtNCd9PlxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwibmFtZVwiIGNsYXNzTmFtZT1cImJsb2NrIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC13aGl0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWluZGlnby0zMDBcIj57ZXJyb3JzLm5hbWUgJiYgJyDigKIgJyArIGVycm9ycy5uYW1lLm1lc3NhZ2V9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0xXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKCduYW1lJywgeyByZXF1aXJlZDogdHJ1ZSB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZWRpdE1vZGUgJiYgZmllbGRJRCA9PT0gJ2VtcHR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtwcm9wcy5lZGl0TW9kZSAmJiBzZWxlY3RlZEZpZWxkICE9PSBudWxsID8gc2VsZWN0ZWRGaWVsZC5uYW1lIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZmllbGRfbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFwcGVhcmFuY2Utbm9uZSBibG9jayB3LWZ1bGwgcHgtMyBweS0yIGRpc2FibGVkOm9wYWNpdHktNzUgYm9yZGVyIGJnLWJsdWVHcmF5LTYwMCBib3JkZXItYmx1ZUdyYXktNjAwIGRhcms6YmctZ3JheS03MDAgZGFyazpib3JkZXItdHJhbnNwYXJlbnQgZGFyazpwbGFjZWhvbGRlci1ncmF5LTMwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbGcgcGxhY2Vob2xkZXItYmx1ZUdyYXktNDAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLXNreS00MDAgZm9jdXM6Ym9yZGVyLXNreS00MDAgc206dGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwibXNiXCIgY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBNc2IgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tMzAwXCI+e2Vycm9ycy5wb3NoICYmICcg4oCiICcgKyBlcnJvcnMucG9zaC5tZXNzYWdlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5yZWdpc3RlcigncG9zaCcsIHsgcmVxdWlyZWQ6IHRydWUgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtwcm9wcy5lZGl0TW9kZSAmJiBmaWVsZElEID09PSAnZW1wdHknfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3Byb3BzLmVkaXRNb2RlICYmIHNlbGVjdGVkRmllbGQgIT09IG51bGwgPyBzZWxlY3RlZEZpZWxkLnBvc2ggOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiOFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhcHBlYXJhbmNlLW5vbmUgYmxvY2sgdy1mdWxsIHB4LTMgcHktMiBkaXNhYmxlZDpvcGFjaXR5LTc1IGJvcmRlciBiZy1ibHVlR3JheS02MDAgYm9yZGVyLWJsdWVHcmF5LTYwMCBkYXJrOmJnLWdyYXktNzAwIGRhcms6Ym9yZGVyLXRyYW5zcGFyZW50IGRhcms6cGxhY2Vob2xkZXItZ3JheS0zMDAgdGV4dC13aGl0ZSByb3VuZGVkLWxnIHBsYWNlaG9sZGVyLWJsdWVHcmF5LTQwMCBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy1za3ktNDAwIGZvY3VzOmJvcmRlci1za3ktNDAwIHNtOnRleHQtc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImxzYlwiIGNsYXNzTmFtZT1cImJsb2NrIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC13aGl0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgTHNiIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTMwMFwiPntlcnJvcnMucG9zbCAmJiAnIOKAoiAnICsgZXJyb3JzLnBvc2wubWVzc2FnZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ucmVnaXN0ZXIoJ3Bvc2wnLCB7IHJlcXVpcmVkOiB0cnVlIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZWRpdE1vZGUgJiYgZmllbGRJRCA9PT0gJ2VtcHR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtwcm9wcy5lZGl0TW9kZSAmJiBzZWxlY3RlZEZpZWxkICE9PSBudWxsID8gc2VsZWN0ZWRGaWVsZC5wb3NsIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIjRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBwZWFyYW5jZS1ub25lIGJsb2NrIHctZnVsbCBweC0zIHB5LTIgZGlzYWJsZWQ6b3BhY2l0eS03NSBib3JkZXIgYmctYmx1ZUdyYXktNjAwIGJvcmRlci1ibHVlR3JheS02MDAgZGFyazpiZy1ncmF5LTcwMCBkYXJrOmJvcmRlci10cmFuc3BhcmVudCBkYXJrOnBsYWNlaG9sZGVyLWdyYXktMzAwIHRleHQtd2hpdGUgcm91bmRlZC1sZyBwbGFjZWhvbGRlci1ibHVlR3JheS00MDAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctc2t5LTQwMCBmb2N1czpib3JkZXItc2t5LTQwMCBzbTp0ZXh0LXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJhY2Nlc3NcIiBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VzcyA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWluZGlnby0zMDBcIj57ZXJyb3JzLmFjY2VzcyAmJiAnIOKAoiAnICsgZXJyb3JzLmFjY2Vzcy5tZXNzYWdlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ucmVnaXN0ZXIoJ2FjY2VzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmVkaXRNb2RlICYmIHNlbGVjdGVkRmllbGQgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBBY2Nlc3Nbc2VsZWN0ZWRGaWVsZC5hY2Nlc3MgYXMgbnVtYmVyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEFjY2Vzc1tBY2Nlc3MuUmVhZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZWRpdE1vZGUgJiYgZmllbGRJRCA9PT0gJ2VtcHR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtMSBweS0yIGJsb2NrIHctZnVsbCBwbC0zIHByLTYgdGV4dC1iYXNlIGJvcmRlciBiZy1ibHVlR3JheS02MDAgYm9yZGVyLWJsdWVHcmF5LTYwMCBkYXJrOmJnLWdyYXktNzAwIGRhcms6Ym9yZGVyLXRyYW5zcGFyZW50IGRhcms6cGxhY2Vob2xkZXItZ3JheS0zMDAgdGV4dC13aGl0ZSByb3VuZGVkLWxnIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLXNreS00MDAgZm9jdXM6Ym9yZGVyLXNreS00MDAgc206dGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtPYmplY3QudmFsdWVzKEFjY2VzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17a2V5fSB2YWx1ZT17a2V5fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2tleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJkZWZhdWx0VmFsdWVcIiBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgVmFsdWV7JyAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tMzAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtlcnJvcnMuZGVmYXVsdFZhbHVlICYmICcg4oCiICcgKyBlcnJvcnMuZGVmYXVsdFZhbHVlLm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ucmVnaXN0ZXIoJ2RlZmF1bHRWYWx1ZScsIHsgcmVxdWlyZWQ6IHRydWUgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmVkaXRNb2RlICYmIGZpZWxkSUQgPT09ICdlbXB0eSd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZWRpdE1vZGUgJiYgc2VsZWN0ZWRGaWVsZCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnMHgnICsgc2VsZWN0ZWRGaWVsZC5kZWZhdWx0VmFsdWUudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIweDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhcHBlYXJhbmNlLW5vbmUgYmxvY2sgdy1mdWxsIHB4LTMgcHktMiBkaXNhYmxlZDpvcGFjaXR5LTc1IGJvcmRlciBiZy1ibHVlR3JheS02MDAgYm9yZGVyLWJsdWVHcmF5LTYwMCBkYXJrOmJnLWdyYXktNzAwIGRhcms6Ym9yZGVyLXRyYW5zcGFyZW50IGRhcms6cGxhY2Vob2xkZXItZ3JheS0zMDAgdGV4dC13aGl0ZSByb3VuZGVkLWxnIHBsYWNlaG9sZGVyLWJsdWVHcmF5LTQwMCBmb2N1czpyaW5nLXNreS00MDAgZm9jdXM6Ym9yZGVyLXNreS00MDAgc206dGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZGVzY3JpcHRpb25cIiBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9ueycgJ31cbiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0xIG1pbi1oLTM2IG1heC1oLTQwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnJlZ2lzdGVyKCdkZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb3BzLmVkaXRNb2RlICYmIHNlbGVjdGVkRmllbGQgIT09IG51bGwgPyBzZWxlY3RlZEZpZWxkLmRlc2NyaXB0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZWRpdE1vZGUgJiYgZmllbGRJRCA9PT0gJ2VtcHR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFwcGVhcmFuY2Utbm9uZSBibG9jayB3LWZ1bGwgcHgtMyBweS0yIG1heC1oLTI4IGRpc2FibGVkOm9wYWNpdHktNzUgYm9yZGVyIGJnLWJsdWVHcmF5LTYwMCBib3JkZXItYmx1ZUdyYXktNjAwIGRhcms6YmctZ3JheS03MDAgZGFyazpib3JkZXItdHJhbnNwYXJlbnQgZGFyazpwbGFjZWhvbGRlci1ncmF5LTMwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbGcgcGxhY2Vob2xkZXItYmx1ZUdyYXktNDAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLXNreS00MDAgZm9jdXM6Ym9yZGVyLXNreS00MDAgc206dGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTIgcHQtMyBmbGV4IGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtwcm9wcy5lZGl0TW9kZSAmJiBmaWVsZElEID09PSAnZW1wdHknfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdy1mdWxsIGlubGluZS1mbGV4IGp1c3RpZnktY2VudGVyIHJvdW5kZWQtbGcgc2hhZG93LWxnIHB4LTQgcHktMiBkaXNhYmxlZDp0cmFuc2Zvcm0tbm9uZSBkaXNhYmxlZDpvcGFjaXR5LTUwIGRpc2FibGVkOmJnLXllbGxvdy01MDAgIGJnLSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmVkaXRNb2RlID8gJ3llbGxvdycgOiAnZW1lcmFsZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0tNDAwIHRleHQtYmFzZSBmb250LW1lZGl1bSB0ZXh0LXdoaXRlIGhvdmVyOmJnLSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmVkaXRNb2RlID8gJ3llbGxvdycgOiAnZW1lcmFsZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0tNTAwIGR1cmF0aW9uLTMwMCB0cmFuc2Zvcm0gaG92ZXI6c2NhbGUtOTUgZm9jdXM6b3V0bGluZS1ub25lIHNtOm1sLTMgc206dy1hdXRvIHNtOnRleHQtc21gfVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5lZGl0TW9kZSA/ICdFZGl0JyA6ICdBZGQnfSBGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtMyB3LWZ1bGwgaW5saW5lLWZsZXgganVzdGlmeS1jZW50ZXIgcm91bmRlZC1sZyBhY3RpdmU6c2NhbGUtOTUgdHJhbnNmb3JtIHNoYWRvdy1sZyBob3ZlcjpzaGFkb3ctbGcgZHVyYXRpb24tMzAwIHB4LTQgcHktMiBiZy1ibHVlR3JheS02MDAgZGFyazpiZy1ncmF5LTcwMCB0ZXh0LWJhc2UgdGV4dC1ncmF5LTMwMCBmb250LW1lZGl1bSBzbTptdC0wIHNtOnctYXV0byBzbTp0ZXh0LXNtIGZvY3VzOm91dGxpbmUtbm9uZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDYW5jZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9e2NhbmNlbEJ1dHRvblJlZn1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9UcmFuc2l0aW9uLkNoaWxkPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nPlxuICAgIDwvVHJhbnNpdGlvbi5Sb290PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGRNb2RhbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/modals/field-modal.tsx\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("2933e15a8a59433d96bc")
/******/ })();
/******/ 
/******/ }
);